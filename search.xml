<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker安装教程</title>
    <url>/2024/10/09/Docker%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h3><p>Docker是一个开源的容器化平台，可帮助开发者轻松地创建、部署和运行应用程序。Docker使开发人员能够在一个独立的容器中打包应用程序及其依赖项，可以将应用程序移植到任何其他环境中。</p>
<h3 id="Doker安装"><a href="#Doker安装" class="headerlink" title="Doker安装"></a>Doker安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#卸载系统之前可能安装的docker</span></span><br><span class="line"><span class="built_in">sudo</span> yum remove docker \</span><br><span class="line">    docker-client \</span><br><span class="line">    docker-client-latest \</span><br><span class="line">    docker-common \</span><br><span class="line">    docker-latest \</span><br><span class="line">    docker-latest-logrotate \</span><br><span class="line">    docker-logrotate \</span><br><span class="line">    docker-engine</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装必须的依赖</span></span><br><span class="line"><span class="built_in">sudo</span> yum install -y yum-utils \ </span><br><span class="line">device-mapper-persistent-data \ </span><br><span class="line">lvm2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置docker源地址</span></span><br><span class="line"><span class="built_in">sudo</span> yum-config-manager \ </span><br><span class="line">--add-repo \ </span><br><span class="line">https://download.docker.com/linux/centos/docker-ce.repo </span><br><span class="line"></span><br><span class="line"><span class="comment">#安装 docker</span></span><br><span class="line"><span class="built_in">sudo</span> yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="启动-docker"><a href="#启动-docker" class="headerlink" title="启动 docker"></a>启动 docker</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动docker</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl start docker</span><br><span class="line"><span class="comment">#查看docker服务状态 running 就是启动成功</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl status docker</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置 docker 开机自启</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="docker-常用命令"><a href="#docker-常用命令" class="headerlink" title="docker 常用命令"></a>docker 常用命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#镜像命令</span></span><br><span class="line">docker images：列出所有镜像</span><br><span class="line">docker search [image]：搜索 Docker 镜像</span><br><span class="line">docker pull [image]：拉取指定镜像</span><br><span class="line">docker rmi [image]：删除指定镜像</span><br><span class="line"><span class="comment">#容器命令</span></span><br><span class="line">docker ps：列出当前所有正在运行的容器</span><br><span class="line">docker ps -a：列出所有容器，包括已经停止的容器</span><br><span class="line">docker create [image]：创建一个新的容器，但不启动它</span><br><span class="line">docker start [container]：启动一个容器</span><br><span class="line">docker stop [container]：停止一个容器</span><br><span class="line">docker <span class="built_in">rm</span> [container]：删除一个容器</span><br><span class="line">docker <span class="built_in">exec</span> -it [container] [<span class="built_in">command</span>]：在运行中的容器中执行命令</span><br><span class="line"><span class="comment">#其他命令</span></span><br><span class="line">docker info：显示 Docker 系统信息</span><br><span class="line">docker version：显示 Docker 版本信息</span><br><span class="line">docker logs [container]：查看容器的日志</span><br><span class="line">docker network <span class="built_in">ls</span>：列出 Docker 网络</span><br><span class="line">docker network create [network]：创建一个新的 Docker 网络</span><br><span class="line">docker network connect [network] [container]：将容器连接到指定的 Docker 网络</span><br><span class="line">docker network disconnect [network] [container]：将容器从指定的 Docker 网络中断开连接 </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Harbor仓库安装教程</title>
    <url>/2024/10/09/Harbor%E4%BB%93%E5%BA%93%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="Harbor简介"><a href="#Harbor简介" class="headerlink" title="Harbor简介"></a>Harbor简介</h3><p>Harbor是一个开源的Docker镜像仓库管理工具，可以通过它快速的建立起自己的私有仓库。</p>
<p><strong>配置文件harbor.yml，只会在第一次启动Harbor时生效，之后对这些参数的更新harbor.yml将被忽略</strong></p>
<h3 id="Harbor部署"><a href="#Harbor部署" class="headerlink" title="Harbor部署"></a>Harbor部署</h3><p>Harbor的压缩包下载地址 <a href="https://github.com/goharbor/harbor/releases/download/v2.11.0/harbor-offline-installer-v2.11.0.tgz">harbor-v2.11.0</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下载安装包</span></span><br><span class="line">wget https://github.com/goharbor/harbor/releases/download/v2.11.0/harbor-offline-installer-v2.11.0.tgz</span><br><span class="line"><span class="comment">#解压缩到指定位置</span></span><br><span class="line">tar zxvf harbor-offline-installer-v2.11.0.tgz -C /usr/local/</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>修改harbor安装的配置文件</p>
<p><strong>使用http请注释掉https相关配置</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#编辑配置文件</span></span><br><span class="line">vim /usr/local/harbor/harbor.yml</span><br><span class="line"><span class="comment">#修改hostname设置服务器的IP或域名</span></span><br><span class="line">hostname = 192.168.1.100</span><br><span class="line"><span class="comment">#配置管理员的初始密码</span></span><br><span class="line"><span class="comment">#默认的用户名/密码是 admin/Harbor12345</span></span><br><span class="line">harbor_admin_password = Harbor12345</span><br></pre></td></tr></table></figure>


<h3 id="启动-Harbor"><a href="#启动-Harbor" class="headerlink" title="启动 Harbor"></a>启动 Harbor</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/harbor/</span><br><span class="line"><span class="comment">#执行./prepare 命令生成相关配置文件</span></span><br><span class="line">./prepare</span><br><span class="line"><span class="comment">#执行./install.sh 命令,创建相关容器，启动harbor</span></span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure>
<p>查看 Harbor 容器状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps </span><br><span class="line"><span class="comment">#harbor相关容器全是up状态说明启动成功</span></span><br></pre></td></tr></table></figure>
<p>浏览器访问：<a href="http://192.168.1.100/">http://192.168.1.100</a> 登录 Harbor WEB UI 界面，默认的管理员用户名和密码是 admin&#x2F;Harbor12345</p>
<h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><p>输入项目名称 common 确认后创建成功</p>
<h3 id="登录-Harbor"><a href="#登录-Harbor" class="headerlink" title="登录 Harbor"></a>登录 Harbor</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#其他docker访问harbor仓库 首先使用有效账号登录到harbor仓库</span></span><br><span class="line">docker login [-u admin -p Harbor12345] http://192.168.1.100:80</span><br><span class="line"></span><br><span class="line"><span class="comment">#http无法访问仓库时，docker配置文件添加如下配置</span></span><br><span class="line"><span class="built_in">cat</span> /etc/docker/daemon.json </span><br><span class="line"> </span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;http://192.168.1.100:80&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="推送镜像到Harbor仓库"><a href="#推送镜像到Harbor仓库" class="headerlink" title="推送镜像到Harbor仓库"></a>推送镜像到Harbor仓库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#本地镜像打Tag</span></span><br><span class="line">docker tag rabbitmq:management 192.168.1.100:80/common/rabbitmq:management</span><br><span class="line"><span class="comment">#推送到Harbor仓库</span></span><br><span class="line">docker push 192.168.1.100:80/common/rabbitmq:management</span><br><span class="line"></span><br><span class="line"><span class="comment">#从Harbor仓库拉去镜像</span></span><br><span class="line">docker pull 192.168.1.100:80/common/rabbitmq:management</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Jenkins安装教程</title>
    <url>/2024/10/09/Jenkins%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="Jenkins简介"><a href="#Jenkins简介" class="headerlink" title="Jenkins简介"></a>Jenkins简介</h3><p>Jenkins是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。</p>
<h3 id="Jenkins安装"><a href="#Jenkins安装" class="headerlink" title="Jenkins安装"></a>Jenkins安装</h3><p>Docker 搭建 Jenkins 容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询镜像</span></span><br><span class="line">docker search jenkins</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载镜像</span></span><br><span class="line">docker pull jenkins/jenkins</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看镜像</span></span><br><span class="line">docker images</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="启动Jenkins容器"><a href="#启动Jenkins容器" class="headerlink" title="启动Jenkins容器"></a>启动Jenkins容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>


<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /home/jenkins_home</span><br><span class="line"><span class="comment">#权限</span></span><br><span class="line"><span class="built_in">chmod</span> 777 /home/jenkins_home</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动Jenkins容器</span></span><br><span class="line">docker run -d -uroot -p 9095:8080 -p 50000:50000 --name jenkins -v /home/jenkins_home:/var/jenkins_home -v /etc/localtime:/etc/localtime jenkins/jenkins</span><br><span class="line"></span><br><span class="line"><span class="comment">#日志查看 有初始化密码</span></span><br><span class="line">docker logs jenkins</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>浏览器输入http:&#x2F;&#x2F;服务器IP:端口Port 即可访问jenkins管理页面</p>
]]></content>
  </entry>
</search>
